/// Values

// Integers
sign = @{ ("+" | "-")? }
digit = @{ '0' .. '9' }
hexdigit = @{
    'A' .. 'F'
    | 'a' .. 'f'
    | digit
}
num = @{ digit ~ ("_"? ~ digit)* }
hexnum = @{ hexdigit ~ ("_"? ~ hexdigit)* }

unsigned_num = @{ "0x" ~ hexnum | num } // uN

signed_num = @{ sign ~ unsigned_num } // sN

// Strings
string = @{ "\"" ~ stringelem* ~ "\"" }
stringelem = @{ stringchar | "\\" ~ hexdigit ~ hexdigit }
stringchar = @{ !("\\" | "\"") ~ any |  "\\t" | "\\n" | "\\r" | "\\\"" | "\\\'" | "\\\\" | ( "\\u{" ~ hexnum ~ "}" )}

// Identifiers
func_id = @{ id }
func_alias = @{ func_id }

constant_id = @{ "%" ~ idchar+ }

id = @{ "$" ~ idchar+ }
idchar = @{
      '0' .. '9'
    | 'a' .. 'z'
    | 'A' .. 'Z'
    | "_"
}

/// Type Type
type_t = _{ u8_t | u16_t | i8_t | i16_t }
u8_t = @{ "u8" }
u16_t = @{ "u16" }
i8_t = @{ "i8" }
i16_t = @{ "i16" }

/// Atom
atom_keyword = _{ ":" }
atom = @{ atom_keyword ~ idchar+ }

/// Literals
literal = { unsigned_num | signed_num }

/// Constants
constant_keyword = _{ "const" }
constant = { opening_brace ~ constant_keyword ~ constant_id ~ type_t ~ literal ~ closing_brace }

/// Functions
func_keyword = _{ "func" }
func = { opening_brace ~ func_keyword ~ id ~ instr* ~ closing_brace }

/// Import/Export
from_keyword = _{ "from" }
as_keyword = _{ "as" }

import_keyword = _{ "import" }
import = { opening_brace ~ import_keyword ~ func_id ~ (as_keyword ~ func_alias)? ~ from_keyword ~ string ~ closing_brace }

export_keyword = _{ "export" }
export = { opening_brace ~ export_keyword ~ func_id ~ (as_keyword ~ func_alias)? ~ closing_brace }

/// Instructions
instr = { while_loop | if_cond | plain_instr }
plain_instr = _{
    opening_brace ~
      (
          push_instr
          | add
          | sub
          | mul
          | div
          | shr
          | shl
          | and
          | or
          | xor
          | not
          | neg
          | neg
          | inc
          | dec
          | call
          | ret
      )
     ~ closing_brace
}

push_instr_keyword = _{ "push" }
push_instr = { push_instr_keyword ~ type_t ~ (literal | constant_id) }

add_keyword = _{ "add" }
add = { add_keyword ~ type_t }

sub_keyword = _{ "sub" }
sub = { sub_keyword ~ type_t }

mul_keyword = _{ "mul" }
mul = { mul_keyword ~ type_t }

div_keyword = _{ "div" }
div = { div_keyword ~ type_t }

shr_keyword = _{ "shr" }
shr = { shr_keyword ~ type_t }

shl_keyword = _{ "shl" }
shl = { shl_keyword ~ type_t }

and_keyword = _{ "and" }
and = { and_keyword ~ type_t }

or_keyword = _{ "or" }
or = { or_keyword ~ type_t }

xor_keyword = _{ "xor" }
xor = { xor_keyword ~ type_t }

not_keyword = _{ "not" }
not = { not_keyword ~ type_t }

neg_keyword = _{ "neg" }
neg = { neg_keyword ~ type_t }

inc_keyword = _{ "inc" }
inc = { inc_keyword ~ type_t }

dec_keyword = _{ "dec" }
dec = { dec_keyword ~ type_t }

call_keyword = _{ "call" }
call = { call_keyword ~ func_id }

ret_keyword = _{ "ret" }
ret = { ret_keyword }

// While
while_loop_keyword = _{ "while" }
while_loop = { opening_brace ~ while_loop_keyword ~ condition ~ instr* ~ closing_brace }

// If
if_cond_keyword = _{ "if" }
else_cond_keyword = _{ "else" }
if_cond = { opening_brace ~ if_cond_keyword ~ condition ~ instr* ~ (opening_brace ~ else_cond_keyword ~ instr* ~ closing_brace)? ~ closing_brace }

// condition
condition = { opening_brace ~ conditional_func ~ closing_brace }
conditional_func = _{ positive | zero | not_zero | negative }
positive = @{ "p" }
negative = @{ "n" }
zero = @{ "z" }
not_zero = @{ "nz" }

/// Misc
opening_brace = _{ "(" }
closing_brace = _{ ")" }

comment = _{ multiline_comment | (";;" ~ (!newline ~ any)*) }
multiline_comment = _{
    "(;" ~ (!";" ~ !")" ~ any)* ~ ";)"
}
newline = _{ "\n" | "\r\n" }
whitespace = _{ " " | "\t" | newline }
file_field = _{ import | constant | func | export }
file = _{ soi ~ file_field* ~ eoi }
